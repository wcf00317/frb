# Generated by Django 3.1.7 on 2021-03-03 13:38

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attack_method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='default', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='runSubmit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='default', max_length=20)),
                ('description', models.CharField(default='default', max_length=300)),
                ('dataset', models.CharField(default='default', max_length=20)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('evaluate_method', models.CharField(default='default', max_length=20)),
                ('model', models.FileField(blank=True, upload_to='')),
                ('modelname', models.CharField(default='default', max_length=20)),
                ('model_data', models.FileField(blank=True, upload_to='')),
                ('time_part', models.CharField(default='default', max_length=30)),
                ('state', models.CharField(choices=[('评测中', '评测中'), ('暂停', '暂停'), ('完成', '完成')], default='评测中', max_length=10)),
                ('public', models.CharField(choices=[('公开', '公开'), ('私有', '私有')], default='私有', max_length=10)),
                ('attack_method', models.ManyToManyField(to='management.Attack_method')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ShowImgAfterUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_Path', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='TaskColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='TaskSubmit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(default='static/img/not_login_user.jpg', upload_to='%Y%m%d/task')),
                ('title', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('startTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('endTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('ind', models.CharField(choices=[('类型一', '类型一'), ('类型二', '类型二')], default='类型一', help_text='评测指标', max_length=10)),
                ('algorithm', models.CharField(choices=[('算法一', '算法一'), ('算法二', '算法二'), ('算法三', '算法三')], default='算法一', max_length=20)),
                ('dataset', models.CharField(default='default', max_length=20)),
                ('modelType', models.CharField(choices=[('类型一', '类型一'), ('类型二', '类型二')], default='类型一', max_length=20)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('participant', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('submit', models.ManyToManyField(to='management.runSubmit')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Task_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitNum', models.PositiveIntegerField(default=0)),
                ('best', models.PositiveIntegerField(default=0)),
                ('bestTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='management.tasksubmit')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Forum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('content', models.TextField()),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('participant', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Datasets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('specifications', models.CharField(max_length=10)),
                ('dataType', models.CharField(max_length=10)),
                ('public', models.CharField(choices=[('公开', '公开'), ('私有', '私有')], default='私有', max_length=3)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('datasets', models.FileField(upload_to='DataSets/')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', ckeditor.fields.RichTextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('Task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='management.tasksubmit')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='management.comment')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replyers', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
